#!/bin/sh


jails_top="$(pwd)"
jails_dir="${jails_top}/jails"
jails_src="${jails_top}/src"
jails_build="${jails_top}/build"
jails_njobs="$(( 2 * $(sysctl -n kern.smp.cpus) + 1 ))"
jails_buildflags="-j "${jails_njobs}""


grab_ports_tarball()
{
	local release="${1}"
	local mirror="${2}"
	local fbsdarch
	local portsfile
	local download=1

	fbsdarch="$(to_FreeBSD_arch "${arch}")"
	portsfile="${mirror}/pub/FreeBSD/ports/ports/ports.tar.gz"

	if [ -s "${jails_src}/ports.tar.gz" -a -s "${jails_src}/ports.tar.gz.sha256" ]
	then
		download=0
		checksum1="$(cat "${jails_src}/ports.tar.gz.sha256")"
		checksum2="$(sha256 -q "${jails_src}/ports.tar.gz")"
		if [ "${checksum1}" != "${checksum2}" ]
		then
			download=1
		fi
	fi

	if [ "${download}" = "1" ]
	then
		fetch -o "${jails_src}/ports.tar.gz" "${portsfile}"
		if [ "$?" = "0" ]
		then
			sha256 -q "${jails_src}/ports.tar.gz" > "${jails_src}/ports.tar.gz.sha256"
		fi
	fi
}

get_pluginjail_packages()
{
	cat <<-__EOF__
		archivers/lzo2
		converters/base64
		converters/iconv
		converters/libiconv
		databases/db42
		databases/gdbm
		databases/sqlite3
		devel/apr1
		devel/gettext
		devel/libtool
		devel/pcre
		devel/pkgconf
		devel/py-distribute
		devel/subversion
		dns/libidn
		ftp/wget
		lang/python27
		ports-mgmt/pkg
		security/ca_root_nss
		textproc/expat2
		textproc/libxml2
		www/aria2
		www/neon29
__EOF__
}

get_jail_packages()
{
	cat <<-__EOF__
		devel/subversion
		devel/git
__EOF__
}

do_create_jail()
{
	local destdir="${1}"
	local release="${2}"
	local arch="${3}"
	local mirror="${4}"
	local jailtype="${5}"
	local name="${6}"
	local here="$(pwd)"
	local sourcebuild=0
	local fbsdarch

	fbsdarch="$(to_FreeBSD_arch "${arch}")"
	if [ -z "${fbsdarch}" ]
	then
		echo "can't determine architecture!"
		exit 1
	fi

	mkdir -p "${destdir}"
	if [ "$?" != "0" ]
	then
		echo "unable to create ${destdir}!"
		exit 1
	fi

	if [ "${sourcebuild}" = "1" ]
	then
		cd "${jails_src}/FreeBSD"
		env MAKEOBJDIRPREFIX="${jails_build}" \
			make "${jails_buildflags}" TARGET="${fbsdarch}" \
				DESTDIR="${destdir}" installworld
		env MAKEOBJDIRPREFIX="${jails_build}" \
			make "${jails_buildflags}" TARGET="${fbsdarch}" \
				DESTDIR="${destdir}" distribution
		cd "${here}"
	else
		local distfiles="base.txz doc.txz games.txz"
		local cache="$(echo "${destdir}"|sed -E 's|\/([^/]+)$|/.\1|')"
		local path

		if [ "${jailtype}" = "portjail" ]
		then
			distfiles="${distfiles} src.txz ports.txz"
		fi
		if [ "${fbsdarch}" = "amd64" ]
		then
			distfiles="${distfiles} lib32.txz"
		fi

		mkdir -p "${cache}"
		chown root:wheel "${cache}"

		path="${mirror}/pub/FreeBSD/releases/${fbsdarch}/${fbsdarch}/${release}"
		for f in ${distfiles}
		do
			if [ ! -s "${cache}/${f}" ]
			then
				fetch -o "${cache}/${f}" "${path}/${f}"
			fi
		done
		for f in ${distfiles}
		do
			tar -pxvf "${cache}/${f}" -C "${destdir}"
		done

		echo "nameserver 8.8.8.8" > "${destdir}/etc/resolv.conf"
		env ASSUME_ALWAYS_YES=1 \
			chroot "${destdir}" /usr/sbin/pkg install -y pkg
		echo "WITH_PKGNG=yes" >> "${destdir}/etc/make.conf"

		mkdir -p "${destdir}/usr/local/etc/pkg/repos"
		cat<<-__EOF__>>"${destdir}/usr/local/etc/pkg/repos/FreeBSD.conf"
		FreeBSD: {
		    url: "pkg+http://pkg.FreeBSD.org/\${ABI}/latest",
		    mirror_type: "srv",
		    enabled: yes
		}
__EOF__

	fi

	return 0
}

create_pluginjail()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local name="${4}"
	local sourcebuild=0
	local destdir="${jails_dir}/${arch}/${name}-${release}"

	do_create_jail "${destdir}" "${release}" "${arch}" \
		"${mirror}" "pluginjail" "${name}"
	echo "nameserver 8.8.8.8" > "${destdir}/etc/resolv.conf"
	env ASSUME_ALWAYS_YES=1 \
			chroot "${destdir}" /usr/sbin/pkg install -y pkg
	rm -f "${destdir}/usr/local/etc/pkg.conf"
	for pkg in $(get_pluginjail_packages)
	do
		env ASSUME_ALWAYS_YES=1 \
			chroot "${destdir}" /usr/sbin/pkg install -y ${pkg}

	done
	chroot "${destdir}" /bin/mkdir /.plugins

	tar -pcvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	return 0
}

create_standard()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local name="${4}"
	local sourcebuild=0
	local here="$(pwd)"
	local destdir="${jails_dir}/${arch}/${name}-${release}"
	local res

	if [ -f "${destdir}.tgz.sha256" ]
	then
		local sha256_1="$(sha256 -q "${destdir}.tgz")"
		local sha256_2="$(cat "${destdir}.tgz.sha256")"
		if [ "${sha256_1}" != "${sha256_2}" ]
		then
			rm -f "${destdir}.tgz"
		else
			return 0	
		fi
	fi

	do_create_jail "${destdir}" "${release}" "${arch}" \
		"${mirror}" "standard" "${name}"

	tar -pcvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	res=$?

	if [ "${res}" = "0" ]
	then
		sha256 -q "${destdir}.tgz" > "${destdir}.tgz.sha256"
	fi

	return ${res}
}

create_portjail()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local name="${4}"
	local sourcebuild=0
	local destdir="${jails_dir}/${arch}/${name}-${release}"
	local res

	if [ -f "${destdir}.tgz.sha256" ]
	then
		local sha256_1="$(sha256 -q "${destdir}.tgz")"
		local sha256_2="$(cat "${destdir}.tgz.sha256")"
		if [ "${sha256_1}" != "${sha256_2}" ]
		then
			rm -f "${destdir}.tgz"
		else
			return 0	
		fi
	fi

	do_create_jail "${destdir}" "${release}" "${arch}" \
		"${mirror}" "portjail" "${name}"
	grab_ports_tarball "${release}" "${mirror}"

	if [ "${sourcebuild}" = "1" ]
	then
		tar -pcvf - -C "${jails_src}/FreeBSD" --exclude '\.git' \
			. 2>/dev/null | tar -pxvf - -C "${destdir}/usr/src" 2>/dev/null
	fi

	tar -pzxvf "${jails_src}/ports.tar.gz" -C "${destdir}/usr"

	tar -pcvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	res=$?

	if [ "${res}" = "0" ]
	then
		sha256 -q "${destdir}.tgz" > "${destdir}.tgz.sha256"
	fi

	return ${res}
}

create_jail()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local name="${4}"
	local sourcebuild=0
	local destdir="${jails_dir}/${arch}/${name}-${release}"
	local res

	if [ -f "${destdir}.tgz.sha256" ]
	then
		local sha256_1="$(sha256 -q "${destdir}.tgz")"
		local sha256_2="$(cat "${destdir}.tgz.sha256")"
		if [ "${sha256_1}" != "${sha256_2}" ]
		then
			rm -f "${destdir}.tgz"
		else
			return 0	
		fi
	fi

	do_create_jail "${destdir}" "${release}" "${arch}" \
		"${mirror}" "portjail" "${name}"

	echo "nameserver 8.8.8.8" > "${destdir}/etc/resolv.conf"
	env ASSUME_ALWAYS_YES=1 \
			chroot "${destdir}" /usr/sbin/pkg install -y pkg
	rm -f "${destdir}/usr/local/etc/pkg.conf"
	for pkg in $(get_jail_packages)
	do
		env ASSUME_ALWAYS_YES=1 \
			chroot "${destdir}" /usr/sbin/pkg install -y ${pkg}

	done

	grab_ports_tarball "${release}" "${mirror}"

	if [ "${sourcebuild}" = "1" ]
	then
		tar -pcvf - -C "${jails_src}/FreeBSD" --exclude '\.git' \
			. 2>/dev/null | tar -pxvf - -C "${destdir}/usr/src" 2>/dev/null
	fi

	tar -pzxvf "${jails_src}/ports.tar.gz" -C "${destdir}/usr"

	tar -pcvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	res=$?

	if [ "${res}" = "0" ]
	then
		sha256 -q "${destdir}.tgz" > "${destdir}.tgz.sha256"
	fi

	return ${res}
}

create_jail_type()
{
	local jailtype="${1}"
	local release="${2}"
	local arch="${3}"
	local mirror="${4}"
	local name="${5}"
	local function

	case "${jailtype}" in
		pluginjail) function="create_pluginjail" ;;
		standard) function="create_standard" ;;
		portjail) function="create_portjail" ;;
		jail) function="create_jail" ;;
	esac

	${function} "${release}" "${arch}" "${mirror}" "${name}"
	return $?
}

check_arch()
{
	local arch="${1}"

	if [ -z "${arch}" ]
	then
		return 1
	fi

	arch="$(echo "${arch}"|tr A-Z a-z)"
	case "${arch}" in
		x86)
			return 0
			;;
		x64)
			return 0
			;;
	esac

	return 1
}

to_FreeBSD_arch()
{
	local arch="${1}"

	case "${arch}" in
		x86)
			echo "i386"
			;;
		x64)
			echo "amd64"
			;;
	esac

	return
}

check_jailtype()
{
	local jailtype="${1}"

	if [ -z "${jailtype}" ]
	then
		return 1
	fi

	jailtype="$(echo "${jailtype}"|tr A-Z a-z)"
	case "${jailtype}" in
		pluginjail)
			return 0
			;;
		standard)
			return 0
			;;
		portjail)
			return 0
			;;
		jail)
			return 0
			;;
	esac

	return 1
}

usage()
{
	cat <<- __EOF__
usage: $(basename $0) [options]
Where option is:
    -t <pluginjail|standard|portjail>  # Type of jail to create
    -a <x86|x64>                       # FreeBSD architecture to use
    -r <release>                       # FreeBSD release to use
    -m <mirror>                        # FreeBSD mirror to use
    -n <name>                          # Name of jail

__EOF__
}

checkout_source()
{
	local srcdir="${1}"
	local here="$(pwd)"

	if [ ! -f "${srcdir}/.pulled" ]
	then
		git clone "${GIT_FREEBSD_REPO}" "${srcdir}/FreeBSD"
		touch "${srcdir}/.pulled"
	else
		cd "${srcdir}/FreeBSD"
		git pull --rebase
		cd "${here}"
	fi
}

build_source()
{
	local arch="${1}"
	local here="$(pwd)"
	local sfile
	local fbsdarch

	fbsdarch="$(to_FreeBSD_arch "${arch}")"
	if [ -z "${fbsdarch}" ]
	then
		echo "can't determine architecture!"
		exit 1
	fi

	sfile="${jails_src}/._bw_${arch}"

	cd "${jails_src}/FreeBSD"

	if [ ! -f "${sfile}" ]
	then
		env MAKEOBJDIRPREFIX="${jails_build}" \
			make "${jails_buildflags}" TARGET="${fbsdarch}" buildworld
		if [ "$?" = "0" ]
		then
			touch "${sfile}"
		fi
	fi

	cd "${here}"
}

main()
{
	local arch="x64"
	local jailtype="standard"
	local release="9.2-RELEASE"
	local mirror="ftp://ftp.freebsd.org"
	local name="freenas-${jailtype}"
	local sourcebuild=0

	if [ "$(id -u)" != "0" ]
	then
		echo "$(basename $0): Must be root"
		exit 2
	fi

	while getopts "t:a:r:m:n:s" opt
	do
		case "${opt}" in 
			t)	jailtype="${OPTARG}"
				if ! check_jailtype "${jailtype}"
				then
					echo "$(basename $0): Invalid jail type specified"
					exit 3
				fi
				name="freenas-${jailtype}"
				;;

			a)	arch="${OPTARG}"
				if ! check_arch "${arch}"
				then
					echo "$(basename $0): Invalid architecture specified"
					exit 4
				fi
				;;

			r)	release="${OPTARG}" ;;
			m)	mirror="${OPTARG}" ;;
			n)	name="${OPTARG}" ;;
			s)	sourcebuild=1 ;;

			\?)	usage
				exit 1
				;;
		esac
	done

	mkdir -p "${jails_dir}"
	chown root:wheel "${jails_dir}"

	mkdir -p "${jails_src}"
	chown root:wheel "${jails_src}"

	mkdir -p "${jails_build}"
	chown root:wheel "${jails_build}"

	if [ "${sourcebuild}" = "1" ]
	then
		checkout_source "${jails_src}"
		build_source "${arch}"
	fi

	create_jail_type "${jailtype}" "${release}" "${arch}" "${mirror}" "${name}"

	return $?
}

if [ "${GIT_LOCATION}" = "EXTERNAL" ]
then
	: ${GIT_FREEBSD_REPO=https://github.com/trueos/trueos}
fi
: ${GIT_FREEBSD_REPO=git@gitserver:/git/repos/freenas-build/trueos.git}

main $*
