#!/bin/sh

jails_top="$(pwd)"
jails_dir="${jails_top}/jails"
jails_src="${jails_top}/src"
jails_build="${jails_top}/build"
jails_njobs="$(( 2 * $(sysctl -n kern.smp.cpus) + 1 ))"
jails_buildflags="-j "${jails_njobs}""


grab_ports_tarball()
{
	local release="${1}"
	local mirror="${2}"
	local fbsdarch
	local portsfile
	local download=1

	fbsdarch="$(to_FreeBSD_arch "${arch}")"
	portsfile="${mirror}/pub/FreeBSD/ports/ports/ports.tar.gz"

	if [ -s "${jails_src}/ports.tar.gz" -a -s "${jails_src}/ports.tar.gz.sha256" ]
	then
		download=0
		checksum1="$(cat "${jails_src}/ports.tar.gz.sha256")"
		checksum2="$(sha256 -q "${jails_src}/ports.tar.gz")"
		if [ "${checksum1}" != "${checksum2}" ]
		then
			download=1
		fi
	fi

	if [ "${download}" = "1" ]
	then
		fetch -o "${jails_src}/ports.tar.gz" "${portsfile}"
		if [ "$?" = "0" ]
		then
			sha256 -q "${jails_src}/ports.tar.gz" > "${jails_src}/ports.tar.gz.sha256"
		fi
	fi
}

get_pluginjail_packages()
{
	cat <<-__EOF__
		archivers/lzo2
		converters/base64
		converters/iconv
		converters/libiconv
		databases/db42
		databases/gdbm
		databases/sqlite3
		devel/apr1
		devel/gettext
		devel/libtool
		devel/pcre
		devel/pkgconf
		devel/py-distribute
		devel/subversion
		dns/libidn
		ftp/wget
		lang/python27
		ports-mgmt/pkg
		security/ca_root_nss
		textproc/expat2
		textproc/libxml2
		www/aria2
		www/neon29
__EOF__
}

old_create_pluginjail()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local name="${4}"
	local jdir

	do_create_jail "${release}" "${arch}" \
		"${mirror}" "${name}"

	jdir="${jails_dir}/${arch}/${name}-${release}"

	echo "nameserver 8.8.8.8" > "${jdir}/etc/resolv.conf"
	for pkg in $(get_pluginjail_packages)
	do
		env ASSUME_ALWAYS_YES=1 \
			chroot "${jdir}" /usr/sbin/pkg install -y ${pkg}
	done
	chroot "${jdir}" /bin/mkdir /.plugins

	tar -cvjf - -C "${jdir}" . > "${jails_dir}/${arch}/${name}-${release}.tgz" 2>/dev/null
}

do_create_jail()
{
	local destdir="${1}"
	local arch="${2}"
	local here="$(pwd)"
	local fbsdarch

	fbsdarch="$(to_FreeBSD_arch "${arch}")"
	if [ -z "${fbsdarch}" ]
	then
		echo "can't determine architecture!"
		exit 1
	fi

	mkdir -p "${destdir}"
	if [ "$?" != "0" ]
	then
		echo "unable to create ${destdir}!"
		exit 1
	fi

	cd "${jails_src}/FreeBSD"
	env MAKEOBJDIRPREFIX="${jails_build}" \
		make "${jails_buildflags}" TARGET="${fbsdarch}" DESTDIR="${destdir}" installworld
	env MAKEOBJDIRPREFIX="${jails_build}" \
		make "${jails_buildflags}" TARGET="${fbsdarch}" DESTDIR="${destdir}" distribution
	cd "${here}"

	return 0
}

create_pluginjail()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local destdir="${jails_dir}/${arch}/freenas-pluginjail-${release}"

	do_create_jail "${destdir}" "${arch}"

	echo "nameserver 8.8.8.8" > "${destdir}/etc/resolv.conf"
	for pkg in $(get_pluginjail_packages)
	do
		env ASSUME_ALWAYS_YES=1 \
			chroot "${destdir}" /usr/sbin/pkg install -y ${pkg}
	done
	chroot "${destdir}" /bin/mkdir /.plugins

	tar -cvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	return 0
}

create_standard()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local here="$(pwd)"
	local destdir="${jails_dir}/${arch}/freenas-standard-${release}"

	do_create_jail "${destdir}" "${arch}"

	tar -cvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	return $?
}

create_portjail()
{
	local release="${1}"
	local arch="${2}"
	local mirror="${3}"
	local destdir="${jails_dir}/${arch}/freenas-portjail-${release}"

	do_create_jail "${destdir}" "${arch}"
	grab_ports_tarball "${release}" "${mirror}"

	tar -cvf - -C "${jails_src}/FreeBSD" --exclude '\.git' \
		. 2>/dev/null | tar -xvf - -C "${destdir}/usr/src" 2>/dev/null

	tar -zxvf "${jails_src}/ports.tar.gz" -C "${destdir}/usr"

	tar -cvjf - -C "${destdir}" . > "${destdir}.tgz" 2>/dev/null
	return $?
}

create_jail()
{
	local jailtype="${1}"
	local release="${2}"
	local arch="${3}"

	case "${jailtype}" in
		pluginjail)
			create_pluginjail "${release}" "${arch}" "${mirror}"
			;;
		standard)
			create_standard "${release}" "${arch}" "${mirror}"
			;;
		portjail)
			create_portjail "${release}" "${arch}" "${mirror}"
			;;
	esac

	return $?
}

check_arch()
{
	local arch="${1}"

	if [ -z "${arch}" ]
	then
		return 1
	fi

	arch="$(echo "${arch}"|tr A-Z a-z)"
	case "${arch}" in
		x86)
			return 0
			;;
		x64)
			return 0
			;;
	esac

	return 1
}

to_FreeBSD_arch()
{
	local arch="${1}"

	case "${arch}" in
		x86)
			echo "i386"
			;;
		x64)
			echo "amd64"
			;;
	esac

	return
}

check_jailtype()
{
	local jailtype="${1}"

	if [ -z "${jailtype}" ]
	then
		return 1
	fi

	jailtype="$(echo "${jailtype}"|tr A-Z a-z)"
	case "${jailtype}" in
		pluginjail)
			return 0
			;;
		standard)
			return 0
			;;
		portjail)
			return 0
			;;
	esac

	return 1
}

usage()
{
	cat <<- __EOF__
usage: $(basename $0) [options]
Where option is:
    -t <pluginjail|standard|portjail>  # Type of jail to create
    -a <x86|x64>                       # FreeBSD architecture to use
    -r <release>                       # FreeBSD release to use
    -m <mirror>                        # FreeBSD mirror to use
    -n <name>                          # Name of jail

__EOF__
}

checkout_source()
{
	local srcdir="${1}"
	local here="$(pwd)"

	if [ ! -f "${srcdir}/.pulled" ]
	then
		git clone "${GIT_FREEBSD_REPO}" "${srcdir}/FreeBSD"
		touch "${srcdir}/.pulled"
	else
		cd "${srcdir}/FreeBSD"
		git pull --rebase
		cd "${here}"
	fi
}

build_source()
{
	local arch="${1}"
	local here="$(pwd)"
	local sfile
	local fbsdarch

	fbsdarch="$(to_FreeBSD_arch "${arch}")"
	if [ -z "${fbsdarch}" ]
	then
		echo "can't determine architecture!"
		exit 1
	fi

	sfile="${jails_src}/._bw_${arch}"

	cd "${jails_src}/FreeBSD"

	if [ ! -f "${sfile}" ]
	then
		env MAKEOBJDIRPREFIX="${jails_build}" \
			make "${jails_buildflags}" TARGET="${fbsdarch}" buildworld
		if [ "$?" = "0" ]
		then
			touch "${sfile}"
		fi
	fi

	cd "${here}"
}

main()
{
	local arch="x64"
	local jailtype="pluginjail"
	local release="9.2-RELEASE"
	local mirror="ftp://ftp.freebsd.org"
	local name="freenas-${jailtype}"

	if [ "$(id -u)" != "0" ]
	then
		echo "$(basename $0): Must be root"
		exit 2
	fi

	while getopts "t:a:r:m:n:" opt
	do
		case "${opt}" in 
			t)	jailtype="${OPTARG}"
				if ! check_jailtype "${jailtype}"
				then
					echo "$(basename $0): Invalid jail type specified"
					exit 3
				fi
				name="freenas-${jailtype}"
				;;

			a)	arch="${OPTARG}"
				if ! check_arch "${arch}"
				then
					echo "$(basename $0): Invalid architecture specified"
					exit 4
				fi
				;;

			r)	release="${OPTARG}" ;;
			m)	mirror="${OPTARG}" ;;
			n)	name="${OPTARG}" ;;

			\?)	usage
				exit 1
				;;
		esac
	done

	mkdir -p "${jails_dir}"
	chown root:wheel "${jails_dir}"

	mkdir -p "${jails_src}"
	chown root:wheel "${jails_src}"

	mkdir -p "${jails_build}"
	chown root:wheel "${jails_build}"

#	checkout_source "${jails_src}"
	build_source "${arch}"

	create_jail "${jailtype}" "${release}" "${arch}" "${mirror}"

	return $?
}

if [ "${GIT_LOCATION}" = "EXTERNAL" ]
then
	: ${GIT_FREEBSD_REPO=https://github.com/trueos/trueos}
fi
: ${GIT_FREEBSD_REPO=git@gitserver:/git/repos/freenas-build/trueos.git}

main $*
